# This file will be the azure devops pipeline yaml file.
# It will auto build, test, collect code analysis, code coverage
# and deploy working versions of project to azure web services

# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
# Whenever a change is made to the master branch
trigger:
  - master

pr: 'none'

pool:
  vmImage: 'ubuntu-latest'

variables:
  sdkVersion: '3.1.x'
  workingDirectory: project2/CharSheet/CharSheetWeb
  solutionPath: '/project2/CharSheet/CharSheet.sln'
  buildConfiguration: 'Release'

stages:
  - stage: 'publish_api'
    jobs:
    - job: 'build_API'
      steps:
        - task: UseDotNet@2
          inputs:
            version: '3.1.x'
            packageType: runtime
        - task: DotNetCoreCLI@2
          inputs:
            command: 'build'
            projects: '**/*CharSheet.Api.csproj'
            arguments: '--configuration $(BuildConfiguration)'
        - task: DotNetCoreCLI@2
          displayName: 'publish dotnetcorecli'
          inputs:
            projects: '**/CharSheet.Api.csproj'
            command: 'publish'
            publishWebProjects: false
            arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
            modifyOutputPath: false
            zipAfterPublish: true
        - publish: '$(Build.ArtifactStagingDirectory)'
          artifact: 'APIBuildArtifact'
  - stage: 'deploy_api'
    dependsOn: 'publish_api'
    jobs:
      - deployment: 'deploy_dev'
        pool:
          vmImage: 'windows-latest'
        environment: dev
        strategy:
          runOnce:
            deploy:
              steps:
                - task: AzureRmWebAppDeployment@4
                  inputs:
                    ConnectionType: 'AzureRM'
                    azureSubscription: 'Azure Subscription 1 Resource Manager'
                    appType: 'apiApp'
                    WebAppName: 'RevatureP2API'
                    packageForLinux: '$(Pipeline.Workspace)/APIBuildArtifact'

  - stage: 'APITesting'
    jobs:
      - job: 'buildjob'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
#configure sonar cloud settings
          - task: SonarCloudPrepare@1
            inputs:
              SonarCloud: 'project1'
              organization: 'charsheets'
              scannerMode: 'MSBuild'
              projectKey: '50c2a04212d795b8c69603b43ceefe4b37e5c7d9'
              projectName: 'CharacterSheets'
              extraProperties: |
                sonar.exclusions=**/obj/**,**/*.dll
                sonar.branch.name=$(Build.SourceBranchName)
                sonar.cs.vstest.reportsPaths=$(Agent.TempDirectory)/*.trx
                sonar.cs.opencover.reportsPaths=$(Build.SourcesDirectory)/**/*.xml
                sonar.exclusions=**/*Migrations
#build project
          
          - task: DotNetCoreCLI@2
            displayName: 'dotnet build'
            inputs:
              arguments: '--configuration $(BuildConfiguration)'
              projects: '**/*.csproj'
            
          
#publish api artifact
          # - task: 'DotNetCoreCLI@2'
          #   displayName: 'Publish DotNetCoreCLI'
          #   inputs:
          #     projects: '**/CharSheet.Api.csproj'
          #     command: 'publish'
          #     publishWebProjects: false
          #     arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
          #     modifyOutputPath: false
          #     zipAfterPublish: true
          # - publish: '$(Build.ArtifactStagingDirectory)'
          #   artifact: 'APIBuildArtifact'
          # - task: AzureRmWebAppDeployment@4
          #   inputs:
          #     ConnectionType: 'AzureRM'
          #     azureSubscription: 'Azure Subscription 1 Resource Manager'
          #     appType: 'apiApp'
          #     WebAppName: 'RevatureP2API'
          #     packageForLinux: '$(Pipeline.Workspace)/APIBuildArtifact'
#run tests
          - task: DotNetCoreCLI@2
            displayName: 'dotnet testing'
            inputs:
              command: 'test'
              arguments: '--configuration $(BuildConfiguration)
                /p:CollectCoverage=true 
                /p:CoverletOutputFormat=opencover 
                /p:Coverletoutput=$(Build.SourcesDirectory)/TestResults/Coverage 
                --collect "Codecoverage"
                --logger trx'
              projects: '**/*CharSheet.Test.csproj'
              nobuild: true
          # - task: AzureRmWebAppDeployment@4
          #   inputs:
          #     ConnectionType: 'AzureRM'
          #     azureSubscription: 'Azure subscription 1 (c17f80a1-d2ba-47cf-a8c1-ee16399869dd)'
          #     appType: 'webApp'
          #     WebAppName: 'JohnsSite'
          #     deployToSlotOrASE: true
          #     ResourceGroupName: 'JohnsResourceGroup'
          #     SlotName: 'production'
          #     packageForLinux: '$(Build.ArtifactStagingDirectory)/app/APIRelease'
#publishes code coverage in azure devops
          - task: PublishCodeCoverageResults@1
            displayName: 'Publish Code Coverage'
            inputs:
              codeCoverageTool: Cobertura
              summaryFileLocation: '$(Build.SourcesDirectory)/**/*.xml'
              reportDirectory: '$(Build.SourcesDirectory)/CodeCoverage'
#deploy api to azure web services
          - task: AzureRmWebAppDeployment@4
            inputs:
              ConnectionType: 'AzureRM'
              azureSubscription: 'Azure Subscription 1 Resource Manager'
              appType: 'apiApp'
              WebAppName: 'MWRevature'
              packageForLinux: '$(System.DefaultWorkingDirectory)/**/*.zip'
          - task: SonarCloudAnalyze@1
          - task: SonarCloudPublish@1
            inputs:
              pollingTimeoutSec: '300'

  - stage: 'Angular'
    jobs:
    - job: 
      pool:
        vmImage: 'ubuntu-latest'
      steps:
#install node.js
      - task: NodeAndNpmTool@1
        inputs:
          versionSpec: '12.x'
          checkLatest: true
#install angular cli
      - task: Npm@1
        displayName: 'Install Angular CLI'
        inputs:
          command: 'custom'
          workingDir: 'project2/CharSheet/CharSheetWeb'
          customCommand: 'install @angular/cli@latest -g'
#install angular app dependencies
      - task: Npm@1
        displayName: 'install project dependencies'
        inputs:
          command: 'install'
          workingDir: 'project2/CharSheet/CharSheetWeb'
#build angular project
      - task: AngularCLI@0
        displayName: 'build angular project'
        inputs:
          command: 'custom'
          project: 'project2/CharSheet/CharSheetWeb'
          custom: 'build --prod'
          DisableAnalytics: false
#deploy angular app to azure app service
      - task: AzureRmWebAppDeployment@4
        inputs:
          ConnectionType: 'AzureRM'
          azureSubscription: 'Azure subscription 1 (c17f80a1-d2ba-47cf-a8c1-ee16399869dd)'
          appType: 'webApp'
          WebAppName: 'JohnsSite'
          packageForLinux: 'project2/CharSheet/CharSheetWeb/dist/CharSheetWeb'
          TakeAppOfflineFlag: true
          RemoveAdditionalFilesFlag: true


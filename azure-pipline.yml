# This file will be the azure devops pipeline yaml file.
# It will auto build, test, collect code analysis, code coverage
# and deploy working versions of project to azure web services

# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
# Whenever a change is made to the master branch
# trigger:
#   - master

pr: 'none'

pool:
  vmImage: 'ubuntu-latest'

variables:
  sdkVersion: '3.1.x'
  workingDirectory: project2/CharSheet/CharSheetWeb
  solutionPath: '/project2/CharSheet/CharSheet.sln'
  buildConfiguration: 'Release'


stages:
  - stage: 'build'
    jobs:
      - job: 'buildjob'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
#configure sonar cloud settings
          - task: SonarCloudPrepare@1
            inputs:
              SonarCloud: 'project1'
              organization: 'pro'
              scannerMode: 'MSBuild'
              projectKey: '5afebd8fc7c6be8448074f35519b3e0c0870fcbc'
              projectName: 'revproj1'
              extraProperties: |
                sonar.exclusions=**/obj/**,**/*.dll
                sonar.branch.name=$(Build.SourceBranchName)
                sonar.cs.vstest.reportsPaths=$(Agent.TempDirectory)/*.trx
                sonar.cs.opencover.reportsPaths=$(Build.SourcesDirectory)/**/*.xml

#build project
          - task: DotNetCoreCLI@2
            displayName: 'dotnet build'
            inputs:
              projects: '**.csproj'

#run tests
          - task: DotNetCoreCLI@2
            displayName: 'dotnet testing'
            inputs:
              command: 'test'
              arguments: '--configuration $(BuildConfiguration)
                /p:CollectCoverage=true 
                /p:CoverletOutputFormat=opencover 
                /p:Coverletoutput=$(Build.SourcesDirector)/Coverage 
                --collect "Codecoverage"
                --logger trx'
              projects: '**/*UnitTests.csproj'
              nobuild: true

#publishes code coverage in azure devops
          - task: PublishCodeCoverageResults@1
            displayName: 'Publish Code Coverage'
            inputs:
              codeCoverageTool: Cobertura
              summaryFileLocation: '$(Build.SorucesDirectory)/**/*.xml'
              reportDirectory: '$(Build.SourcesDirectory)/CodeCoverage'
          - task: SonarCloudAnalyze@1
          - task: SonarCloudPublish@1
            inputs:
              pollingTimeoutSec: '300'



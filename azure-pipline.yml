# This file will be the azure devops pipeline yaml file.
# It will auto build, test, collect code analysis, code coverage
# and deploy working versions of project to azure web services

# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
# Whenever a change is made to the master branch
trigger:
  - master

pr: 'none'

pool:
  vmImage: 'ubuntu-latest'

variables:
  sdkVersion: '3.1.x'
  workingDirectory: project2/CharSheet/CharSheetWeb
  solutionPath: '/project2/CharSheet/CharSheet.sln'
  buildConfiguration: 'Release'

stages:
  - stage: BuildAPI
    jobs:
    - job: build
      pool: 'ubuntu-latest'
      steps:
      - task: DotNetCoreCLI@2
        inputs:
          command: publish
          arguments: 
            --configuration $(buildConfiguration)
            --output $(Build.ArtifactStagingDirectory)/API
          zipAfterPublish: false
        displayName: dotnet publish API
      - publish: $(System.DefaultWorkingDirectory)/project2/CharSheetApi/API
        artifact: APIRelease
  - stage: BuildAngular
    jobs:
    - job: build
      steps:
      - task: Npm@1
        displayName: 'install project dependencies'
        inputs:
          command: 'install'
          workingDir: 'project2/CharSheet/CharSheetWeb'
      - task: AngularCLI@0
        displayName: 'build angular project'
        inputs:
          command: 'custom'
          project: 'project2/CharSheet/CharSheetWeb'
          custom: 'build --prod'
          DisableAnalytics: false
      - publish: $(System.DefaultWorkingDirectory)/project2/CharSheet/dist
        artifact: AngularRelease
 
  - stage: Coverage
    jobs:
    - job: coverage
      steps:
      - task: SonarCloudPrepare@1
        inputs:
          SonarCloud: 'project1'
          organization: 'charsheets'
          scannerMode: 'MSBuild'
          projectKey: '50c2a04212d795b8c69603b43ceefe4b37e5c7d9'
          projectName: 'CharacterSheets'
          extraProperties: |
            sonar.exclusions=**/obj/**,**/*.dll
            sonar.branch.name=$(Build.SourceBranchName)
            sonar.cs.vstest.reportsPaths=$(Agent.TempDirectory)/*.trx
            sonar.cs.opencover.reportsPaths=$(Build.SourcesDirectory)/**/*.xml
            sonar.typescript.lcov.reportPaths=$(System.DefaultWorkingDirectory)/project2/CharSheet/CharSheetWeb/coverage/lcov.info
        
      - task: DotNetCoreCLI@2
        displayName: 'dotnet testing'
        inputs:
          command: 'test'
          arguments: '--configuration $(BuildConfiguration)
            /p:CollectCoverage=true 
            /p:CoverletOutputFormat=opencover 
            /p:Coverletoutput=$(Build.SourcesDirectory)/TestResults/Coverage 
            --collect "Codecoverage"
            --logger trx'
          projects: '**/*CharSheet.Test.csproj'
          nobuild: true

      - task: Npm@1
        displayName: 'install project dependencies'
        inputs:
          command: 'install'
          workingDir: 'project2/CharSheet/CharSheetWeb'

      - task: AngularCLI@0
        inputs:
          command: 'test'
          project: 'project2/CharSheet/CharSheetWeb'
          arguments: '--watch=false --code-coverage --browsers ChromeHeadless'
          DisableAnalytics: false
      - task: SonarCloudAnalyze@1
      - task: SonarCloudPublish@1
        inputs:
          pollingTimeoutSec: '300'


  - stage: DeployAPI
    jobs:
    - job: 
      pool:
        vmImage: 'ubuntu-latest'
      steps:
      - task: DownloadPipelineArtifact@2
        inputs:
          buildType: 'current'
          artifactName: 'APIRelease'
          targetPath: 'API'
      - task: AzureRmWebAppDeployment@4
        inputs:
          ConnectionType: AzureRM
          azureSubscription: 'Azure subscription 1 (c17f80a1-d2ba-47cf-a8c1-ee16399869dd)'
          appType: 'webAppLinux'
          WebAppName: 'JohnsSite'
          packageForLinux: '$(System.DefaultWorkingDirectory)/release'
          RuntimeStack: 'DOTNETCORE|Latest'
          StartupCommand: 'dotnet AptMgmtPortalAPI.dll'
  
  - stage: DeployAngular
    jobs:
    - job: deploy
      steps:
      - task: DownloadPipelineArtifact@2
        inputs:
          buildType: current
          artifactName: 'AngularRelease'
          targetPath: dist
      - task: AzureRmWebAppDeployment@4
        inputs:
          ConnectionType: 'AzureRM'
          azureSubscription: 'Azure subscription 1 (c17f80a1-d2ba-47cf-a8c1-ee16399869dd)'
          appType: 'webApp'
          WebAppName: 'JohnsSite'
          packageForLinux: 'project2/CharSheet/CharSheetWeb/dist/CharSheetWeb'
          enableCustomDeployment: true
          DeploymentType: 'webDeploy'
          TakeAppOfflineFlag: false
          RemoveAdditionalFilesFlag: true



  SOAP is a messaging protocol, it provides rules and specifications for exchanging information. It can be used to retrieve data from server locations. The data is retrieved in an XML formatted doc. SOAP has different layers of specification including messaging format and message processing models. It's kind of like a carrier service that carries your letter from post office to post office until it reaches its destination, while checking to make sure that the information in your letter isn't empty and that it can be read by the recipient. Instead of post offices, the message is being transferred across nodes. The nodes have their own roles that designate what actions they will perform on the message. A node that has no role will do nothing to the message and pass it along. SOAP messages are contained in an envelope and that envelope contains at minimum a body, which is the information that is being transferred. It can have a header, but that isn't mandatory. 

REST is a template style for creating web services. It specifies a set constraints to be met before the service can be considered truly RESTful. The first of these constraints is Client-Server, this constraint dictates that there should a separation of concerns between the server-side data and the user interface, the UI shouldn't handle storing information or creating database, that should be done on the server side, and the server side shouldn't handle presentation and user interaction that should happen on the client side. The second principle is that the service should be stateless, it means that every HTTP request should be made in isolation. When a request is sent, it should require all necessary information for the server side to fulfill that request. A request should never rely on information from previous requests. The third principle is the ability of the information to be cached, to meet this principle all responses must be explicitly or implicitly declared as cacheable or not cacheable.A cacheable item can be stored for use with requests later. The 4th principle is Layer. For this one my understanding is that while there can be multiple layers to a webservice each of those layers needs to be self-contained. They shouldn't be able to see what each other is doing. That allows for intermediaries like proxies to be introduced throughout the communication process. The 5th principle is uniform interface. Uniform interface has a set of constraints whose intent is to properly decouple everything. The 6th principle is optional and one is Code on Demand, my understanding of this principle is the ability to transfer the client-side code, like Java script. My basic understanding of Rest is that an API can be restful if it meets the requirements or constraints set forth by REST. Rest seems to be more or less a set of rules and practices that when used properly will increase performance and make things more scalable. It's like a blueprint for a building that when followed properly will create a stable sturdy structure. 